// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Device_DeviceType int32

const (
	Device_onOff  Device_DeviceType = 0
	Device_dimmer Device_DeviceType = 1
	Device_sensor Device_DeviceType = 2
)

var Device_DeviceType_name = map[int32]string{
	0: "onOff",
	1: "dimmer",
	2: "sensor",
}

var Device_DeviceType_value = map[string]int32{
	"onOff":  0,
	"dimmer": 1,
	"sensor": 2,
}

func (x Device_DeviceType) String() string {
	return proto.EnumName(Device_DeviceType_name, int32(x))
}

func (Device_DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{2, 0}
}

type ID struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateDevice struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                int32    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDevice) Reset()         { *m = UpdateDevice{} }
func (m *UpdateDevice) String() string { return proto.CompactTextString(m) }
func (*UpdateDevice) ProtoMessage()    {}
func (*UpdateDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{1}
}

func (m *UpdateDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDevice.Unmarshal(m, b)
}
func (m *UpdateDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDevice.Marshal(b, m, deterministic)
}
func (m *UpdateDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDevice.Merge(m, src)
}
func (m *UpdateDevice) XXX_Size() int {
	return xxx_messageInfo_UpdateDevice.Size(m)
}
func (m *UpdateDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDevice.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDevice proto.InternalMessageInfo

func (m *UpdateDevice) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateDevice) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Device struct {
	Id                   int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Hardware             string            `protobuf:"bytes,2,opt,name=hardware,proto3" json:"hardware,omitempty"`
	Name                 string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Location             string            `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Type                 Device_DeviceType `protobuf:"varint,5,opt,name=type,proto3,enum=pb.Device_DeviceType" json:"type,omitempty"`
	Unit                 string            `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	State                int32             `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{2}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Device) GetHardware() string {
	if m != nil {
		return m.Hardware
	}
	return ""
}

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Device) GetType() Device_DeviceType {
	if m != nil {
		return m.Type
	}
	return Device_onOff
}

func (m *Device) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Device) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type Devices struct {
	Device               []*Device `protobuf:"bytes,1,rep,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Devices) Reset()         { *m = Devices{} }
func (m *Devices) String() string { return proto.CompactTextString(m) }
func (*Devices) ProtoMessage()    {}
func (*Devices) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{3}
}

func (m *Devices) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Devices.Unmarshal(m, b)
}
func (m *Devices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Devices.Marshal(b, m, deterministic)
}
func (m *Devices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Devices.Merge(m, src)
}
func (m *Devices) XXX_Size() int {
	return xxx_messageInfo_Devices.Size(m)
}
func (m *Devices) XXX_DiscardUnknown() {
	xxx_messageInfo_Devices.DiscardUnknown(m)
}

var xxx_messageInfo_Devices proto.InternalMessageInfo

func (m *Devices) GetDevice() []*Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{4}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("pb.Device_DeviceType", Device_DeviceType_name, Device_DeviceType_value)
	proto.RegisterType((*ID)(nil), "pb.ID")
	proto.RegisterType((*UpdateDevice)(nil), "pb.UpdateDevice")
	proto.RegisterType((*Device)(nil), "pb.Device")
	proto.RegisterType((*Devices)(nil), "pb.Devices")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
}

func init() { proto.RegisterFile("device.proto", fileDescriptor_870276a56ac00da5) }

var fileDescriptor_870276a56ac00da5 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xef, 0x6a, 0xf2, 0x30,
	0x14, 0xc6, 0x6d, 0xb5, 0xf5, 0xf5, 0xf8, 0x87, 0x12, 0x7c, 0x21, 0xf8, 0x49, 0x02, 0x2f, 0xe8,
	0x0b, 0xeb, 0xc0, 0xed, 0x06, 0x36, 0x3a, 0x86, 0x9f, 0x06, 0x75, 0xbb, 0x80, 0x6a, 0x8f, 0x33,
	0xd0, 0x3f, 0x21, 0x8d, 0x4a, 0x2f, 0x6e, 0x37, 0xb4, 0xab, 0x18, 0x49, 0xea, 0x74, 0xc2, 0x3e,
	0xf5, 0x3c, 0x79, 0x7e, 0xcf, 0xc9, 0x21, 0xa7, 0x30, 0x48, 0xf1, 0xc0, 0x37, 0x18, 0x0a, 0x59,
	0xaa, 0x92, 0xb8, 0x62, 0xcd, 0xc6, 0xe0, 0x2e, 0x23, 0x32, 0x02, 0x97, 0xa7, 0xd4, 0x99, 0x3a,
	0x33, 0x2f, 0x76, 0x79, 0xca, 0xee, 0x61, 0xf0, 0x26, 0xd2, 0x44, 0x61, 0x64, 0xf8, 0x6b, 0x9f,
	0x8c, 0xc1, 0x3b, 0x24, 0xd9, 0x1e, 0xa9, 0x6b, 0x8e, 0xac, 0x60, 0x9f, 0x0e, 0xf8, 0xbf, 0x04,
	0x26, 0xf0, 0x67, 0x97, 0xc8, 0xf4, 0x98, 0x48, 0x9b, 0xe9, 0xc5, 0xdf, 0x9a, 0x10, 0xe8, 0x14,
	0x49, 0x8e, 0xb4, 0x6d, 0xce, 0x4d, 0xad, 0xf9, 0xac, 0xdc, 0x24, 0x8a, 0x97, 0x05, 0xed, 0x58,
	0xfe, 0xa4, 0xc9, 0x1c, 0x3a, 0xaa, 0x16, 0x48, 0xbd, 0xa9, 0x33, 0x1b, 0x2d, 0xfe, 0x86, 0x62,
	0x1d, 0xda, 0x5b, 0x9b, 0xcf, 0x6b, 0x2d, 0x30, 0x36, 0x88, 0x6e, 0xbd, 0x2f, 0xb8, 0xa2, 0xbe,
	0x6d, 0xad, 0x6b, 0x3d, 0x7b, 0xa5, 0x12, 0x85, 0xb4, 0x6b, 0x67, 0x37, 0x82, 0xdd, 0x02, 0x9c,
	0xd3, 0xa4, 0x07, 0x5e, 0x59, 0xbc, 0x6c, 0xb7, 0x41, 0x8b, 0x00, 0xf8, 0x29, 0xcf, 0x73, 0x94,
	0x81, 0xa3, 0xeb, 0x0a, 0x8b, 0xaa, 0x94, 0x81, 0xcb, 0x6e, 0xa0, 0x6b, 0x03, 0x15, 0x61, 0xe0,
	0xdb, 0x77, 0xa5, 0xce, 0xb4, 0x3d, 0xeb, 0x2f, 0xe0, 0x3c, 0x52, 0xdc, 0x38, 0xac, 0x0b, 0xde,
	0x53, 0x2e, 0x54, 0xbd, 0xf8, 0x70, 0x60, 0x68, 0xbd, 0x15, 0x4a, 0xf3, 0x56, 0x73, 0x18, 0x3e,
	0xa3, 0x7a, 0xc8, 0xb2, 0x53, 0xbf, 0x9e, 0xce, 0x1b, 0x7a, 0xd2, 0x3f, 0xb7, 0xaa, 0x58, 0x8b,
	0xfc, 0x33, 0xa8, 0xd5, 0x8f, 0xf5, 0x32, 0x22, 0xbe, 0xf6, 0x97, 0xd1, 0xe4, 0xe2, 0x4a, 0xd6,
	0x22, 0x21, 0x0c, 0x56, 0x47, 0xae, 0x36, 0xbb, 0x66, 0x1b, 0x81, 0x76, 0x2f, 0x17, 0x7a, 0xc5,
	0xff, 0x87, 0x51, 0x8c, 0xef, 0xbc, 0x52, 0x28, 0x9b, 0xc4, 0x85, 0xff, 0x93, 0x5d, 0xfb, 0xe6,
	0xdf, 0xb9, 0xfb, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xda, 0x76, 0x84, 0x69, 0x4b, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceServiceClient interface {
	// List all registered devices
	GetAllDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error)
	// Get a device by ID
	GetDeviceByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Device, error)
	// Update a device's state
	SwitchDevice(ctx context.Context, in *UpdateDevice, opts ...grpc.CallOption) (*Device, error)
	// Register a new device
	RegisterDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error)
}

type deviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceServiceClient(cc *grpc.ClientConn) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetAllDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error) {
	out := new(Devices)
	err := c.cc.Invoke(ctx, "/pb.DeviceService/GetAllDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/pb.DeviceService/GetDeviceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SwitchDevice(ctx context.Context, in *UpdateDevice, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/pb.DeviceService/SwitchDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RegisterDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/pb.DeviceService/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
type DeviceServiceServer interface {
	// List all registered devices
	GetAllDevices(context.Context, *Empty) (*Devices, error)
	// Get a device by ID
	GetDeviceByID(context.Context, *ID) (*Device, error)
	// Update a device's state
	SwitchDevice(context.Context, *UpdateDevice) (*Device, error)
	// Register a new device
	RegisterDevice(context.Context, *Device) (*Device, error)
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_GetAllDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetAllDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeviceService/GetAllDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetAllDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeviceService/GetDeviceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SwitchDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SwitchDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeviceService/SwitchDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SwitchDevice(ctx, req.(*UpdateDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeviceService/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RegisterDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllDevices",
			Handler:    _DeviceService_GetAllDevices_Handler,
		},
		{
			MethodName: "GetDeviceByID",
			Handler:    _DeviceService_GetDeviceByID_Handler,
		},
		{
			MethodName: "SwitchDevice",
			Handler:    _DeviceService_SwitchDevice_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _DeviceService_RegisterDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}
